{"ast":null,"code":"var _jsxFileName = \"/Users/rubengrytten/Desktop/cv_app/src/components/CVForm.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import {\n//   createCV,\n//   updateCV,\n//   deleteCV,\n//   fetchCVsByUserId,\n// } from \"../services/api\";\n\n// const CVForm = () => {\n//   const [cv, setCv] = useState({\n//     personalInfo: { name: \"\", email: \"\", phone: \"\" },\n//     skills: \"\",\n//     education: \"\",\n//     experience: \"\",\n//     references: \"\",\n//   });\n//   const [cvList, setCvList] = useState([]);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [id, setId] = useState(null); // For edit purposes\n\n//   useEffect(() => {\n//     const currentUserId = localStorage.getItem(\"userId\"); // Hent userId fra localStorage\n\n//     if (!currentUserId) {\n//       alert(\"Brukeren er ikke logget inn.\");\n//       navigate(\"/login\"); // Naviger til login-siden hvis ikke logget inn\n//       return; // Avbryt videre behandling\n//     }\n\n//     const fetchUserCVs = async () => {\n//       setLoading(true);\n//       try {\n//         const cvs = await fetchCVsByUserId(currentUserId); // Hent alle CV-er\n//         const filteredCVs = cvs.filter((cv) => cv.userId === currentUserId); // Filtrer CV-er for den spesifikke brukeren\n//         setCvList(filteredCVs); // Sett de filtrerte CV-ene i tilstand\n//       } catch (error) {\n//         alert(\"Feil ved henting av CV-er.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchUserCVs(); // Hent CV-er for innlogget bruker\n//   }, [navigate]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const currentUserId = localStorage.getItem(\"userId\"); // Hent userId fra localStorage\n\n//     if (!currentUserId) {\n//       alert(\"Brukeren er ikke logget inn.\");\n//       navigate(\"/login\"); // Naviger til login-siden hvis ikke logget inn\n//       return; // Avbryt videre behandling\n//     }\n\n//     try {\n//       const newCv = {\n//         ...cv,\n//         userId: currentUserId, // Sørg for at userId settes korrekt her\n//       };\n\n//       if (isEditing) {\n//         await updateCV(id, newCv); // Bruk ID for å oppdatere\n//         alert(\"CV oppdatert!\");\n//       } else {\n//         await createCV(newCv); // Opprett ny CV\n//         alert(\"CV opprettet!\");\n//         setCvList([...cvList, newCv]); // Legg til det nye CV-et i listen\n//       }\n\n//       setCv({\n//         personalInfo: { name: \"\", email: \"\", phone: \"\" },\n//         skills: \"\",\n//         education: \"\",\n//         experience: \"\",\n//         references: \"\",\n//       });\n//       setIsEditing(false);\n//     } catch (error) {\n//       console.error(\"Feil ved oppretting eller oppdatering av CV:\", error);\n//       alert(\"Feil ved oppretting eller oppdatering av CV.\");\n//     }\n//   };\n\n//   const handleDelete = async (cvId) => {\n//     try {\n//       await deleteCV(cvId); // Slett CV basert på ID\n//       alert(\"CV slettet!\");\n//       setCvList(cvList.filter((item) => item._id !== cvId)); // Fjern CV fra listen etter sletting\n//       navigate(\"/cvs\"); // Naviger til listen av CV-er\n//     } catch (error) {\n//       alert(\"Feil ved sletting av CV.\");\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setCv({ ...cv, personalInfo: { ...cv.personalInfo, [name]: value } });\n//   };\n\n//   const handleEdit = (cvItem) => {\n//     setCv({\n//       personalInfo: {\n//         name: cvItem.personalInfo.name,\n//         email: cvItem.personalInfo.email,\n//         phone: cvItem.personalInfo.phone,\n//       },\n//       skills: cvItem.skills,\n//       education: cvItem.education,\n//       experience: cvItem.experience,\n//       references: cvItem.references,\n//     });\n//     setIsEditing(true);\n//     setId(cvItem._id); // Sett ID for redigering\n//   };\n\n//   return (\n//     <div className=\"p-8 bg-gradient-to-r from-[#90E0EF] to-[#CAF0F8] min-h-screen\">\n//       <h1 className=\"mb-20 text-3xl font-bold text-[#023E8A] text-center\">\n//         {isEditing ? \"Rediger CV\" : \"Opprett CV\"}\n//       </h1>\n\n//       <form\n//         onSubmit={handleSubmit}\n//         className=\"max-w-md p-10 mx-auto bg-white rounded-lg shadow-lg\"\n//       >\n//         <h2 className=\"mb-4 text-xl text-[#023E8A] text-center\">\n//           {isEditing ? \"Oppdater CV\" : \"Opprett ny CV\"}\n//         </h2>\n\n//         <label className=\"block mb-2\">Navn:</label>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           value={cv.personalInfo.name}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <label className=\"block mb-2\">E-post:</label>\n//         <input\n//           type=\"email\"\n//           name=\"email\"\n//           value={cv.personalInfo.email}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <label className=\"block mb-2\">Telefonnummer:</label>\n//         <input\n//           type=\"tel\"\n//           name=\"phone\"\n//           value={cv.personalInfo.phone}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <button\n//           type=\"submit\"\n//           className=\"mt-8 w-full p-3 text-white bg-[#0077B6] rounded-lg hover:bg-[#023E8A] focus:ring-4 focus:ring-[#90E0EF]\"\n//         >\n//           {isEditing ? \"Oppdater CV\" : \"Opprett CV\"}\n//         </button>\n\n//         {isEditing && (\n//           <button\n//             type=\"button\"\n//             onClick={() => handleDelete(id)}\n//             className=\"mt-4 w-full p-3 text-white bg-red-500 rounded-lg hover:bg-red-600 focus:ring-4 focus:ring-[#90E0EF]\"\n//           >\n//             Slett CV\n//           </button>\n//         )}\n//       </form>\n\n//       <h2 className=\"mt-16 mb-4 text-xl text-[#023E8A]\">Eksisterende CV-er:</h2>\n//       <ul className=\"space-y-4\">\n//         {cvList.map((cvItem, index) => (\n//           <li\n//             key={cvItem._id || index} // Bruk ID for hver CV\n//             className=\"p-4 bg-white border rounded-lg shadow-lg\"\n//           >\n//             <p>\n//               <strong>Navn:</strong> {cvItem.personalInfo.name}\n//             </p>\n//             <p>\n//               <strong>E-post:</strong> {cvItem.personalInfo.email}\n//             </p>\n//             <p>\n//               <strong>Telefonnummer:</strong> {cvItem.personalInfo.phone}\n//             </p>\n//             <button\n//               onClick={() => handleEdit(cvItem)}\n//               className=\"mt-2 w-full p-2 text-white bg-[#023E8A] rounded-lg hover:bg-[#0077B6]\"\n//             >\n//               Rediger\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default CVForm;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CVForm = () => {\n  _s();\n  const [cv, setCv] = useState({\n    personalInfo: {\n      name: \"\",\n      email: \"\",\n      phone: \"\"\n    },\n    skills: [\"\"],\n    education: [{\n      institution: \"\",\n      degree: \"\",\n      year: \"\"\n    }],\n    experience: [{\n      title: \"\",\n      company: \"\",\n      years: \"\"\n    }],\n    references: [{\n      name: \"\",\n      contactInfo: \"\"\n    }]\n  });\n  const navigate = useNavigate();\n  const handleChange = (e, section, index = null, field = null) => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (section === \"personalInfo\") {\n      setCv({\n        ...cv,\n        personalInfo: {\n          ...cv.personalInfo,\n          [name]: value\n        }\n      });\n    } else {\n      const updatedSection = [...cv[section]];\n      updatedSection[index][field] = value;\n      setCv({\n        ...cv,\n        [section]: updatedSection\n      });\n    }\n  };\n  const addField = section => {\n    const newField = section === \"skills\" ? \"\" : {\n      institution: \"\",\n      degree: \"\",\n      year: \"\"\n    };\n    setCv({\n      ...cv,\n      [section]: [...cv[section], newField]\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\"/cvs\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(cv)\n      });\n      if (response.ok) {\n        alert(\"CV opprettet!\");\n        setCv({\n          personalInfo: {\n            name: \"\",\n            email: \"\",\n            phone: \"\"\n          },\n          skills: [\"\"],\n          education: [{\n            institution: \"\",\n            degree: \"\",\n            year: \"\"\n          }],\n          experience: [{\n            title: \"\",\n            company: \"\",\n            years: \"\"\n          }],\n          references: [{\n            name: \"\",\n            contactInfo: \"\"\n          }]\n        });\n        navigate(\"/cvs\");\n      } else {\n        alert(\"Feil ved oppretting av CV.\");\n      }\n    } catch (error) {\n      console.error(\"Feil:\", error);\n      alert(\"Feil ved oppretting av CV.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"max-w-md p-6 mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mb-4 text-2xl font-bold\",\n      children: \"Opprett CV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"font-bold\",\n      children: \"Personlig informasjon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Navn\",\n      value: cv.personalInfo.name,\n      onChange: e => handleChange(e, \"personalInfo\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      name: \"email\",\n      placeholder: \"E-post\",\n      value: cv.personalInfo.email,\n      onChange: e => handleChange(e, \"personalInfo\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"tel\",\n      name: \"phone\",\n      placeholder: \"Telefonnummer\",\n      value: cv.personalInfo.phone,\n      onChange: e => handleChange(e, \"personalInfo\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"font-bold\",\n      children: \"Ferdigheter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), cv.skills.map((skill, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Ferdighet\",\n      value: skill,\n      onChange: e => handleChange(e, \"skills\", index, null)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => addField(\"skills\"),\n      children: \"Legg til\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"font-bold\",\n      children: \"Utdanning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), cv.education.map((edu, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Institusjon\",\n        value: edu.institution,\n        onChange: e => handleChange(e, \"education\", index, \"institution\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Grad\",\n        value: edu.degree,\n        onChange: e => handleChange(e, \"education\", index, \"degree\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\xC5r\",\n        value: edu.year,\n        onChange: e => handleChange(e, \"education\", index, \"year\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => addField(\"education\"),\n      children: \"Legg til\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"font-bold\",\n      children: \"Erfaring\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), cv.experience.map((exp, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Stilling\",\n        value: exp.title,\n        onChange: e => handleChange(e, \"experience\", index, \"title\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Firma\",\n        value: exp.company,\n        onChange: e => handleChange(e, \"experience\", index, \"company\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\xC5r\",\n        value: exp.years,\n        onChange: e => handleChange(e, \"experience\", index, \"years\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => addField(\"experience\"),\n      children: \"Legg til\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"font-bold\",\n      children: \"Referanser\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this), cv.references.map((ref, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Navn\",\n        value: ref.name,\n        onChange: e => handleChange(e, \"references\", index, \"name\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Kontaktinfo\",\n        value: ref.contactInfo,\n        onChange: e => handleChange(e, \"references\", index, \"contactInfo\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => addField(\"references\"),\n      children: \"Legg til\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Opprett CV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(CVForm, \"ireTSL3TrJUJBmxPAuQCe1KEx+g=\", false, function () {\n  return [useNavigate];\n});\n_c = CVForm;\nexport default CVForm;\nvar _c;\n$RefreshReg$(_c, \"CVForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","CVForm","_s","cv","setCv","personalInfo","name","email","phone","skills","education","institution","degree","year","experience","title","company","years","references","contactInfo","navigate","handleChange","e","section","index","field","value","target","updatedSection","addField","newField","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","alert","error","console","onSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","map","skill","onClick","edu","exp","ref","_c","$RefreshReg$"],"sources":["/Users/rubengrytten/Desktop/cv_app/src/components/CVForm.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import {\n//   createCV,\n//   updateCV,\n//   deleteCV,\n//   fetchCVsByUserId,\n// } from \"../services/api\";\n\n// const CVForm = () => {\n//   const [cv, setCv] = useState({\n//     personalInfo: { name: \"\", email: \"\", phone: \"\" },\n//     skills: \"\",\n//     education: \"\",\n//     experience: \"\",\n//     references: \"\",\n//   });\n//   const [cvList, setCvList] = useState([]);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [id, setId] = useState(null); // For edit purposes\n\n//   useEffect(() => {\n//     const currentUserId = localStorage.getItem(\"userId\"); // Hent userId fra localStorage\n\n//     if (!currentUserId) {\n//       alert(\"Brukeren er ikke logget inn.\");\n//       navigate(\"/login\"); // Naviger til login-siden hvis ikke logget inn\n//       return; // Avbryt videre behandling\n//     }\n\n//     const fetchUserCVs = async () => {\n//       setLoading(true);\n//       try {\n//         const cvs = await fetchCVsByUserId(currentUserId); // Hent alle CV-er\n//         const filteredCVs = cvs.filter((cv) => cv.userId === currentUserId); // Filtrer CV-er for den spesifikke brukeren\n//         setCvList(filteredCVs); // Sett de filtrerte CV-ene i tilstand\n//       } catch (error) {\n//         alert(\"Feil ved henting av CV-er.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchUserCVs(); // Hent CV-er for innlogget bruker\n//   }, [navigate]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const currentUserId = localStorage.getItem(\"userId\"); // Hent userId fra localStorage\n\n//     if (!currentUserId) {\n//       alert(\"Brukeren er ikke logget inn.\");\n//       navigate(\"/login\"); // Naviger til login-siden hvis ikke logget inn\n//       return; // Avbryt videre behandling\n//     }\n\n//     try {\n//       const newCv = {\n//         ...cv,\n//         userId: currentUserId, // Sørg for at userId settes korrekt her\n//       };\n\n//       if (isEditing) {\n//         await updateCV(id, newCv); // Bruk ID for å oppdatere\n//         alert(\"CV oppdatert!\");\n//       } else {\n//         await createCV(newCv); // Opprett ny CV\n//         alert(\"CV opprettet!\");\n//         setCvList([...cvList, newCv]); // Legg til det nye CV-et i listen\n//       }\n\n//       setCv({\n//         personalInfo: { name: \"\", email: \"\", phone: \"\" },\n//         skills: \"\",\n//         education: \"\",\n//         experience: \"\",\n//         references: \"\",\n//       });\n//       setIsEditing(false);\n//     } catch (error) {\n//       console.error(\"Feil ved oppretting eller oppdatering av CV:\", error);\n//       alert(\"Feil ved oppretting eller oppdatering av CV.\");\n//     }\n//   };\n\n//   const handleDelete = async (cvId) => {\n//     try {\n//       await deleteCV(cvId); // Slett CV basert på ID\n//       alert(\"CV slettet!\");\n//       setCvList(cvList.filter((item) => item._id !== cvId)); // Fjern CV fra listen etter sletting\n//       navigate(\"/cvs\"); // Naviger til listen av CV-er\n//     } catch (error) {\n//       alert(\"Feil ved sletting av CV.\");\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setCv({ ...cv, personalInfo: { ...cv.personalInfo, [name]: value } });\n//   };\n\n//   const handleEdit = (cvItem) => {\n//     setCv({\n//       personalInfo: {\n//         name: cvItem.personalInfo.name,\n//         email: cvItem.personalInfo.email,\n//         phone: cvItem.personalInfo.phone,\n//       },\n//       skills: cvItem.skills,\n//       education: cvItem.education,\n//       experience: cvItem.experience,\n//       references: cvItem.references,\n//     });\n//     setIsEditing(true);\n//     setId(cvItem._id); // Sett ID for redigering\n//   };\n\n//   return (\n//     <div className=\"p-8 bg-gradient-to-r from-[#90E0EF] to-[#CAF0F8] min-h-screen\">\n//       <h1 className=\"mb-20 text-3xl font-bold text-[#023E8A] text-center\">\n//         {isEditing ? \"Rediger CV\" : \"Opprett CV\"}\n//       </h1>\n\n//       <form\n//         onSubmit={handleSubmit}\n//         className=\"max-w-md p-10 mx-auto bg-white rounded-lg shadow-lg\"\n//       >\n//         <h2 className=\"mb-4 text-xl text-[#023E8A] text-center\">\n//           {isEditing ? \"Oppdater CV\" : \"Opprett ny CV\"}\n//         </h2>\n\n//         <label className=\"block mb-2\">Navn:</label>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           value={cv.personalInfo.name}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <label className=\"block mb-2\">E-post:</label>\n//         <input\n//           type=\"email\"\n//           name=\"email\"\n//           value={cv.personalInfo.email}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <label className=\"block mb-2\">Telefonnummer:</label>\n//         <input\n//           type=\"tel\"\n//           name=\"phone\"\n//           value={cv.personalInfo.phone}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <button\n//           type=\"submit\"\n//           className=\"mt-8 w-full p-3 text-white bg-[#0077B6] rounded-lg hover:bg-[#023E8A] focus:ring-4 focus:ring-[#90E0EF]\"\n//         >\n//           {isEditing ? \"Oppdater CV\" : \"Opprett CV\"}\n//         </button>\n\n//         {isEditing && (\n//           <button\n//             type=\"button\"\n//             onClick={() => handleDelete(id)}\n//             className=\"mt-4 w-full p-3 text-white bg-red-500 rounded-lg hover:bg-red-600 focus:ring-4 focus:ring-[#90E0EF]\"\n//           >\n//             Slett CV\n//           </button>\n//         )}\n//       </form>\n\n//       <h2 className=\"mt-16 mb-4 text-xl text-[#023E8A]\">Eksisterende CV-er:</h2>\n//       <ul className=\"space-y-4\">\n//         {cvList.map((cvItem, index) => (\n//           <li\n//             key={cvItem._id || index} // Bruk ID for hver CV\n//             className=\"p-4 bg-white border rounded-lg shadow-lg\"\n//           >\n//             <p>\n//               <strong>Navn:</strong> {cvItem.personalInfo.name}\n//             </p>\n//             <p>\n//               <strong>E-post:</strong> {cvItem.personalInfo.email}\n//             </p>\n//             <p>\n//               <strong>Telefonnummer:</strong> {cvItem.personalInfo.phone}\n//             </p>\n//             <button\n//               onClick={() => handleEdit(cvItem)}\n//               className=\"mt-2 w-full p-2 text-white bg-[#023E8A] rounded-lg hover:bg-[#0077B6]\"\n//             >\n//               Rediger\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default CVForm;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst CVForm = () => {\n  const [cv, setCv] = useState({\n    personalInfo: { name: \"\", email: \"\", phone: \"\" },\n    skills: [\"\"],\n    education: [{ institution: \"\", degree: \"\", year: \"\" }],\n    experience: [{ title: \"\", company: \"\", years: \"\" }],\n    references: [{ name: \"\", contactInfo: \"\" }],\n  });\n  const navigate = useNavigate();\n\n  const handleChange = (e, section, index = null, field = null) => {\n    const { name, value } = e.target;\n    if (section === \"personalInfo\") {\n      setCv({ ...cv, personalInfo: { ...cv.personalInfo, [name]: value } });\n    } else {\n      const updatedSection = [...cv[section]];\n      updatedSection[index][field] = value;\n      setCv({ ...cv, [section]: updatedSection });\n    }\n  };\n\n  const addField = (section) => {\n    const newField =\n      section === \"skills\" ? \"\" : { institution: \"\", degree: \"\", year: \"\" };\n    setCv({ ...cv, [section]: [...cv[section], newField] });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\"/cvs\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(cv),\n      });\n\n      if (response.ok) {\n        alert(\"CV opprettet!\");\n        setCv({\n          personalInfo: { name: \"\", email: \"\", phone: \"\" },\n          skills: [\"\"],\n          education: [{ institution: \"\", degree: \"\", year: \"\" }],\n          experience: [{ title: \"\", company: \"\", years: \"\" }],\n          references: [{ name: \"\", contactInfo: \"\" }],\n        });\n        navigate(\"/cvs\");\n      } else {\n        alert(\"Feil ved oppretting av CV.\");\n      }\n    } catch (error) {\n      console.error(\"Feil:\", error);\n      alert(\"Feil ved oppretting av CV.\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"max-w-md p-6 mx-auto\">\n      <h1 className=\"mb-4 text-2xl font-bold\">Opprett CV</h1>\n      <h2 className=\"font-bold\">Personlig informasjon</h2>\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Navn\"\n        value={cv.personalInfo.name}\n        onChange={(e) => handleChange(e, \"personalInfo\")}\n      />\n      <input\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"E-post\"\n        value={cv.personalInfo.email}\n        onChange={(e) => handleChange(e, \"personalInfo\")}\n      />\n      <input\n        type=\"tel\"\n        name=\"phone\"\n        placeholder=\"Telefonnummer\"\n        value={cv.personalInfo.phone}\n        onChange={(e) => handleChange(e, \"personalInfo\")}\n      />\n\n      <h2 className=\"font-bold\">Ferdigheter</h2>\n      {cv.skills.map((skill, index) => (\n        <input\n          key={index}\n          type=\"text\"\n          placeholder=\"Ferdighet\"\n          value={skill}\n          onChange={(e) => handleChange(e, \"skills\", index, null)}\n        />\n      ))}\n      <button type=\"button\" onClick={() => addField(\"skills\")}>\n        Legg til\n      </button>\n\n      <h2 className=\"font-bold\">Utdanning</h2>\n      {cv.education.map((edu, index) => (\n        <div key={index}>\n          <input\n            type=\"text\"\n            placeholder=\"Institusjon\"\n            value={edu.institution}\n            onChange={(e) => handleChange(e, \"education\", index, \"institution\")}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Grad\"\n            value={edu.degree}\n            onChange={(e) => handleChange(e, \"education\", index, \"degree\")}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"År\"\n            value={edu.year}\n            onChange={(e) => handleChange(e, \"education\", index, \"year\")}\n          />\n        </div>\n      ))}\n      <button type=\"button\" onClick={() => addField(\"education\")}>\n        Legg til\n      </button>\n\n      <h2 className=\"font-bold\">Erfaring</h2>\n      {cv.experience.map((exp, index) => (\n        <div key={index}>\n          <input\n            type=\"text\"\n            placeholder=\"Stilling\"\n            value={exp.title}\n            onChange={(e) => handleChange(e, \"experience\", index, \"title\")}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Firma\"\n            value={exp.company}\n            onChange={(e) => handleChange(e, \"experience\", index, \"company\")}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"År\"\n            value={exp.years}\n            onChange={(e) => handleChange(e, \"experience\", index, \"years\")}\n          />\n        </div>\n      ))}\n      <button type=\"button\" onClick={() => addField(\"experience\")}>\n        Legg til\n      </button>\n\n      <h2 className=\"font-bold\">Referanser</h2>\n      {cv.references.map((ref, index) => (\n        <div key={index}>\n          <input\n            type=\"text\"\n            placeholder=\"Navn\"\n            value={ref.name}\n            onChange={(e) => handleChange(e, \"references\", index, \"name\")}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Kontaktinfo\"\n            value={ref.contactInfo}\n            onChange={(e) =>\n              handleChange(e, \"references\", index, \"contactInfo\")\n            }\n          />\n        </div>\n      ))}\n      <button type=\"button\" onClick={() => addField(\"references\")}>\n        Legg til\n      </button>\n\n      <button type=\"submit\">Opprett CV</button>\n    </form>\n  );\n};\n\nexport default CVForm;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGR,QAAQ,CAAC;IAC3BS,YAAY,EAAE;MAAEC,IAAI,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}