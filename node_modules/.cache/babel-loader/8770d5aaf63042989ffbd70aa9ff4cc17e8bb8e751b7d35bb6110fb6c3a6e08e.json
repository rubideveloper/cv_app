{"ast":null,"code":"const BASE_URL = \"https://crudcrud.com/api/bd8cfa7122a04024b77cc3574759e1d5\";\n\n// Funksjon for å hente alle brukere\nexport const getUsers = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/users`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 403) {\n        throw new Error(\"Access denied: You must be an admin to fetch users\");\n      } else {\n        throw new Error(\"Failed to fetch users\");\n      }\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å registrere en bruker\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${BASE_URL}/users`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      if (response.status === 400) {\n        throw new Error(\"User already exists\");\n      }\n      throw new Error(\"Failed to register user\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error registering user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å oppdatere en bruker\nexport const updateUser = async (userId, updatedData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(\"User not found\");\n      }\n      if (response.status === 403) {\n        throw new Error(\"Forbidden: You do not have permission to update this user\");\n      }\n      throw new Error(\"Failed to update user\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å slette en bruker\nexport const deleteUser = async (userId, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(\"User not found\");\n      }\n      if (response.status === 403) {\n        throw new Error(\"Forbidden: You do not have permission to delete this user\");\n      }\n      throw new Error(\"Failed to delete user\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å hente alle CV-er\nexport const getCVs = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.status === 403) {\n      throw new Error(\"Forbidden: You do not have permission to access these CVs\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch CVs\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching CVs:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å opprette en CV\nexport const createCV = async (cvData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(cvData)\n    });\n    if (response.status === 400) {\n      throw new Error(\"Bad Request: Missing or invalid data\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to create CV\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error creating CV:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å oppdatere en CV\nexport const updateCV = async (cvId, updatedData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs/${cvId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (response.status === 404) {\n      throw new Error(\"CV not found or no access\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to update CV\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating CV:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å slette en CV\nexport const deleteCV = async (cvId, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs/${cvId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.status === 404) {\n      throw new Error(\"CV not found or no access\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to delete CV\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting CV:\", error);\n    throw error;\n  }\n};\nexport const loginUser = async ({\n  userName,\n  password\n}) => {\n  try {\n    const response = await fetch(`${BASE_URL}/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userName,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Invalid login credentials\");\n    }\n    const data = await response.json();\n    return data.token; // Forventer at tokenet returneres som svar\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","getUsers","token","response","fetch","method","headers","Authorization","ok","status","Error","json","error","console","registerUser","userData","body","JSON","stringify","updateUser","userId","updatedData","deleteUser","getCVs","createCV","cvData","updateCV","cvId","deleteCV","loginUser","userName","password","data"],"sources":["/Users/rubengrytten/Desktop/cv_app/src/api.js"],"sourcesContent":["const BASE_URL = \"https://crudcrud.com/api/bd8cfa7122a04024b77cc3574759e1d5\";\n\n// Funksjon for å hente alle brukere\nexport const getUsers = async (token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      if (response.status === 403) {\n        throw new Error(\"Access denied: You must be an admin to fetch users\");\n      } else {\n        throw new Error(\"Failed to fetch users\");\n      }\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å registrere en bruker\nexport const registerUser = async (userData) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userData),\n    });\n\n    if (!response.ok) {\n      if (response.status === 400) {\n        throw new Error(\"User already exists\");\n      }\n      throw new Error(\"Failed to register user\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error registering user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å oppdatere en bruker\nexport const updateUser = async (userId, updatedData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(updatedData),\n    });\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(\"User not found\");\n      }\n      if (response.status === 403) {\n        throw new Error(\n          \"Forbidden: You do not have permission to update this user\"\n        );\n      }\n      throw new Error(\"Failed to update user\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å slette en bruker\nexport const deleteUser = async (userId, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(\"User not found\");\n      }\n      if (response.status === 403) {\n        throw new Error(\n          \"Forbidden: You do not have permission to delete this user\"\n        );\n      }\n      throw new Error(\"Failed to delete user\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å hente alle CV-er\nexport const getCVs = async (token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    if (response.status === 403) {\n      throw new Error(\n        \"Forbidden: You do not have permission to access these CVs\"\n      );\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch CVs\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching CVs:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å opprette en CV\nexport const createCV = async (cvData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(cvData),\n    });\n    if (response.status === 400) {\n      throw new Error(\"Bad Request: Missing or invalid data\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to create CV\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error creating CV:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å oppdatere en CV\nexport const updateCV = async (cvId, updatedData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs/${cvId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(updatedData),\n    });\n\n    if (response.status === 404) {\n      throw new Error(\"CV not found or no access\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to update CV\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating CV:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å slette en CV\nexport const deleteCV = async (cvId, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs/${cvId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (response.status === 404) {\n      throw new Error(\"CV not found or no access\");\n    }\n\n    if (!response.ok) {\n      throw new Error(\"Failed to delete CV\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting CV:\", error);\n    throw error;\n  }\n};\n\nexport const loginUser = async ({ userName, password }) => {\n  try {\n    const response = await fetch(`${BASE_URL}/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ userName, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Invalid login credentials\");\n    }\n\n    const data = await response.json();\n    return data.token; // Forventer at tokenet returneres som svar\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}