{"ast":null,"code":"const BASE_URL = \"https://crudcrud.com/api/bd8cfa7122a04024b77cc3574759e1d5\";\nexport const getUsers = async () => {\n  const role = localStorage.getItem(\"role\"); // Hent brukerens rolle fra localStorage\n  const userId = localStorage.getItem(\"userId\"); // Hent brukerens ID fra localStorage\n\n  // Sjekk om rolle er admin\n  if (role !== \"admin\") {\n    throw new Error(\"Access denied: You must be an admin to fetch users\");\n  }\n  if (!userId) {\n    throw new Error(\"User ID is required for fetching users\");\n  }\n  try {\n    const response = await fetch(`${BASE_URL}/users`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userId}` // Bruker userId som \"token\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch users\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å registrere en bruker\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${BASE_URL}/users`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      if (response.status === 400) {\n        throw new Error(\"User already exists\");\n      }\n      throw new Error(\"Failed to register user\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error registering user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å oppdatere en bruker\nexport const updateUser = async (userId, updatedData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(\"User not found\");\n      }\n      if (response.status === 403) {\n        throw new Error(\"Forbidden: You do not have permission to update this user\");\n      }\n      throw new Error(\"Failed to update user\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å slette en bruker\nexport const deleteUser = async (userId, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(\"User not found\");\n      }\n      if (response.status === 403) {\n        throw new Error(\"Forbidden: You do not have permission to delete this user\");\n      }\n      throw new Error(\"Failed to delete user\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å hente alle CV-er\nexport const getCVs = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.status === 403) {\n      throw new Error(\"Forbidden: You do not have permission to access these CVs\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch CVs\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching CVs:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å opprette en CV\nexport const createCV = async (cvData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(cvData)\n    });\n    if (response.status === 400) {\n      throw new Error(\"Bad Request: Missing or invalid data\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to create CV\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error creating CV:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å oppdatere en CV\nexport const updateCV = async (cvId, updatedData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs/${cvId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (response.status === 404) {\n      throw new Error(\"CV not found or no access\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to update CV\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating CV:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å slette en CV\nexport const deleteCV = async (cvId, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs/${cvId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.status === 404) {\n      throw new Error(\"CV not found or no access\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to delete CV\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting CV:\", error);\n    throw error;\n  }\n};\nexport const loginUser = async ({\n  userName,\n  password\n}) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users`);\n    if (!response.ok) throw new Error(\"Failed to fetch users\");\n    const users = await response.json();\n    const user = users.find(u => u.userName === userName && u.password === password);\n    if (!user) throw new Error(\"Invalid login credentials\");\n\n    // Lagre token og rolle\n    localStorage.setItem(\"token\", user._id); // Bruk _id som token\n    localStorage.setItem(\"role\", user.role); // Lagre rollen\n    return user._id;\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","getUsers","role","localStorage","getItem","userId","Error","response","fetch","method","headers","Authorization","ok","json","error","console","registerUser","userData","body","JSON","stringify","status","updateUser","updatedData","token","deleteUser","getCVs","createCV","cvData","updateCV","cvId","deleteCV","loginUser","userName","password","users","user","find","u","setItem","_id"],"sources":["/Users/rubengrytten/Desktop/cv_app/src/api.js"],"sourcesContent":["const BASE_URL = \"https://crudcrud.com/api/bd8cfa7122a04024b77cc3574759e1d5\";\n\nexport const getUsers = async () => {\n  const role = localStorage.getItem(\"role\"); // Hent brukerens rolle fra localStorage\n  const userId = localStorage.getItem(\"userId\"); // Hent brukerens ID fra localStorage\n\n  // Sjekk om rolle er admin\n  if (role !== \"admin\") {\n    throw new Error(\"Access denied: You must be an admin to fetch users\");\n  }\n\n  if (!userId) {\n    throw new Error(\"User ID is required for fetching users\");\n  }\n\n  try {\n    const response = await fetch(`${BASE_URL}/users`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userId}`, // Bruker userId som \"token\"\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch users\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å registrere en bruker\nexport const registerUser = async (userData) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userData),\n    });\n\n    if (!response.ok) {\n      if (response.status === 400) {\n        throw new Error(\"User already exists\");\n      }\n      throw new Error(\"Failed to register user\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error registering user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å oppdatere en bruker\nexport const updateUser = async (userId, updatedData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(updatedData),\n    });\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(\"User not found\");\n      }\n      if (response.status === 403) {\n        throw new Error(\n          \"Forbidden: You do not have permission to update this user\"\n        );\n      }\n      throw new Error(\"Failed to update user\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å slette en bruker\nexport const deleteUser = async (userId, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(\"User not found\");\n      }\n      if (response.status === 403) {\n        throw new Error(\n          \"Forbidden: You do not have permission to delete this user\"\n        );\n      }\n      throw new Error(\"Failed to delete user\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting user:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å hente alle CV-er\nexport const getCVs = async (token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    if (response.status === 403) {\n      throw new Error(\n        \"Forbidden: You do not have permission to access these CVs\"\n      );\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch CVs\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching CVs:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å opprette en CV\nexport const createCV = async (cvData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(cvData),\n    });\n    if (response.status === 400) {\n      throw new Error(\"Bad Request: Missing or invalid data\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to create CV\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error creating CV:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å oppdatere en CV\nexport const updateCV = async (cvId, updatedData, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs/${cvId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(updatedData),\n    });\n\n    if (response.status === 404) {\n      throw new Error(\"CV not found or no access\");\n    }\n    if (!response.ok) {\n      throw new Error(\"Failed to update CV\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating CV:\", error);\n    throw error;\n  }\n};\n\n// Funksjon for å slette en CV\nexport const deleteCV = async (cvId, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cvs/${cvId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (response.status === 404) {\n      throw new Error(\"CV not found or no access\");\n    }\n\n    if (!response.ok) {\n      throw new Error(\"Failed to delete CV\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting CV:\", error);\n    throw error;\n  }\n};\n\nexport const loginUser = async ({ userName, password }) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users`);\n    if (!response.ok) throw new Error(\"Failed to fetch users\");\n\n    const users = await response.json();\n    const user = users.find(\n      (u) => u.userName === userName && u.password === password\n    );\n\n    if (!user) throw new Error(\"Invalid login credentials\");\n\n    // Lagre token og rolle\n    localStorage.setItem(\"token\", user._id); // Bruk _id som token\n    localStorage.setItem(\"role\", user.role); // Lagre rollen\n    return user._id;\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}