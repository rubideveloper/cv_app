{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import {\n//   createCV,\n//   updateCV,\n//   deleteCV,\n//   fetchCVsByUserId,\n// } from \"../services/api\";\n\n// const CVForm = () => {\n//   const [cv, setCv] = useState({\n//     personalInfo: { name: \"\", email: \"\", phone: \"\" },\n//     skills: \"\",\n//     education: \"\",\n//     experience: \"\",\n//     references: \"\",\n//   });\n//   const [cvList, setCvList] = useState([]);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [id, setId] = useState(null); // For edit purposes\n\n//   useEffect(() => {\n//     const currentUserId = localStorage.getItem(\"userId\"); // Hent userId fra localStorage\n\n//     if (!currentUserId) {\n//       alert(\"Brukeren er ikke logget inn.\");\n//       navigate(\"/login\"); // Naviger til login-siden hvis ikke logget inn\n//       return; // Avbryt videre behandling\n//     }\n\n//     const fetchUserCVs = async () => {\n//       setLoading(true);\n//       try {\n//         const cvs = await fetchCVsByUserId(currentUserId); // Hent alle CV-er\n//         const filteredCVs = cvs.filter((cv) => cv.userId === currentUserId); // Filtrer CV-er for den spesifikke brukeren\n//         setCvList(filteredCVs); // Sett de filtrerte CV-ene i tilstand\n//       } catch (error) {\n//         alert(\"Feil ved henting av CV-er.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchUserCVs(); // Hent CV-er for innlogget bruker\n//   }, [navigate]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const currentUserId = localStorage.getItem(\"userId\"); // Hent userId fra localStorage\n\n//     if (!currentUserId) {\n//       alert(\"Brukeren er ikke logget inn.\");\n//       navigate(\"/login\"); // Naviger til login-siden hvis ikke logget inn\n//       return; // Avbryt videre behandling\n//     }\n\n//     try {\n//       const newCv = {\n//         ...cv,\n//         userId: currentUserId, // Sørg for at userId settes korrekt her\n//       };\n\n//       if (isEditing) {\n//         await updateCV(id, newCv); // Bruk ID for å oppdatere\n//         alert(\"CV oppdatert!\");\n//       } else {\n//         await createCV(newCv); // Opprett ny CV\n//         alert(\"CV opprettet!\");\n//         setCvList([...cvList, newCv]); // Legg til det nye CV-et i listen\n//       }\n\n//       setCv({\n//         personalInfo: { name: \"\", email: \"\", phone: \"\" },\n//         skills: \"\",\n//         education: \"\",\n//         experience: \"\",\n//         references: \"\",\n//       });\n//       setIsEditing(false);\n//     } catch (error) {\n//       console.error(\"Feil ved oppretting eller oppdatering av CV:\", error);\n//       alert(\"Feil ved oppretting eller oppdatering av CV.\");\n//     }\n//   };\n\n//   const handleDelete = async (cvId) => {\n//     try {\n//       await deleteCV(cvId); // Slett CV basert på ID\n//       alert(\"CV slettet!\");\n//       setCvList(cvList.filter((item) => item._id !== cvId)); // Fjern CV fra listen etter sletting\n//       navigate(\"/cvs\"); // Naviger til listen av CV-er\n//     } catch (error) {\n//       alert(\"Feil ved sletting av CV.\");\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setCv({ ...cv, personalInfo: { ...cv.personalInfo, [name]: value } });\n//   };\n\n//   const handleEdit = (cvItem) => {\n//     setCv({\n//       personalInfo: {\n//         name: cvItem.personalInfo.name,\n//         email: cvItem.personalInfo.email,\n//         phone: cvItem.personalInfo.phone,\n//       },\n//       skills: cvItem.skills,\n//       education: cvItem.education,\n//       experience: cvItem.experience,\n//       references: cvItem.references,\n//     });\n//     setIsEditing(true);\n//     setId(cvItem._id); // Sett ID for redigering\n//   };\n\n//   return (\n//     <div className=\"p-8 bg-gradient-to-r from-[#90E0EF] to-[#CAF0F8] min-h-screen\">\n//       <h1 className=\"mb-20 text-3xl font-bold text-[#023E8A] text-center\">\n//         {isEditing ? \"Rediger CV\" : \"Opprett CV\"}\n//       </h1>\n\n//       <form\n//         onSubmit={handleSubmit}\n//         className=\"max-w-md p-10 mx-auto bg-white rounded-lg shadow-lg\"\n//       >\n//         <h2 className=\"mb-4 text-xl text-[#023E8A] text-center\">\n//           {isEditing ? \"Oppdater CV\" : \"Opprett ny CV\"}\n//         </h2>\n\n//         <label className=\"block mb-2\">Navn:</label>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           value={cv.personalInfo.name}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <label className=\"block mb-2\">E-post:</label>\n//         <input\n//           type=\"email\"\n//           name=\"email\"\n//           value={cv.personalInfo.email}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <label className=\"block mb-2\">Telefonnummer:</label>\n//         <input\n//           type=\"tel\"\n//           name=\"phone\"\n//           value={cv.personalInfo.phone}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <button\n//           type=\"submit\"\n//           className=\"mt-8 w-full p-3 text-white bg-[#0077B6] rounded-lg hover:bg-[#023E8A] focus:ring-4 focus:ring-[#90E0EF]\"\n//         >\n//           {isEditing ? \"Oppdater CV\" : \"Opprett CV\"}\n//         </button>\n\n//         {isEditing && (\n//           <button\n//             type=\"button\"\n//             onClick={() => handleDelete(id)}\n//             className=\"mt-4 w-full p-3 text-white bg-red-500 rounded-lg hover:bg-red-600 focus:ring-4 focus:ring-[#90E0EF]\"\n//           >\n//             Slett CV\n//           </button>\n//         )}\n//       </form>\n\n//       <h2 className=\"mt-16 mb-4 text-xl text-[#023E8A]\">Din CV:</h2>\n//       <ul className=\"space-y-4\">\n//         {cvList.map((cvItem, index) => (\n//           <li\n//             key={cvItem._id || index} // Bruk ID for hver CV\n//             className=\"p-4 bg-white border rounded-lg shadow-lg\"\n//           >\n//             <p>\n//               <strong>Navn:</strong> {cvItem.personalInfo.name}\n//             </p>\n//             <p>\n//               <strong>E-post:</strong> {cvItem.personalInfo.email}\n//             </p>\n//             <p>\n//               <strong>Telefonnummer:</strong> {cvItem.personalInfo.phone}\n//             </p>\n//             <button\n//               onClick={() => handleEdit(cvItem)}\n//               className=\"mt-2 w-full p-2 text-white bg-[#023E8A] rounded-lg hover:bg-[#0077B6]\"\n//             >\n//               Rediger\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default CVForm;","map":{"version":3,"names":[],"sources":["/Users/rubengrytten/Desktop/cv_app/src/components/CVForm.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import {\n//   createCV,\n//   updateCV,\n//   deleteCV,\n//   fetchCVsByUserId,\n// } from \"../services/api\";\n\n// const CVForm = () => {\n//   const [cv, setCv] = useState({\n//     personalInfo: { name: \"\", email: \"\", phone: \"\" },\n//     skills: \"\",\n//     education: \"\",\n//     experience: \"\",\n//     references: \"\",\n//   });\n//   const [cvList, setCvList] = useState([]);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [id, setId] = useState(null); // For edit purposes\n\n//   useEffect(() => {\n//     const currentUserId = localStorage.getItem(\"userId\"); // Hent userId fra localStorage\n\n//     if (!currentUserId) {\n//       alert(\"Brukeren er ikke logget inn.\");\n//       navigate(\"/login\"); // Naviger til login-siden hvis ikke logget inn\n//       return; // Avbryt videre behandling\n//     }\n\n//     const fetchUserCVs = async () => {\n//       setLoading(true);\n//       try {\n//         const cvs = await fetchCVsByUserId(currentUserId); // Hent alle CV-er\n//         const filteredCVs = cvs.filter((cv) => cv.userId === currentUserId); // Filtrer CV-er for den spesifikke brukeren\n//         setCvList(filteredCVs); // Sett de filtrerte CV-ene i tilstand\n//       } catch (error) {\n//         alert(\"Feil ved henting av CV-er.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchUserCVs(); // Hent CV-er for innlogget bruker\n//   }, [navigate]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const currentUserId = localStorage.getItem(\"userId\"); // Hent userId fra localStorage\n\n//     if (!currentUserId) {\n//       alert(\"Brukeren er ikke logget inn.\");\n//       navigate(\"/login\"); // Naviger til login-siden hvis ikke logget inn\n//       return; // Avbryt videre behandling\n//     }\n\n//     try {\n//       const newCv = {\n//         ...cv,\n//         userId: currentUserId, // Sørg for at userId settes korrekt her\n//       };\n\n//       if (isEditing) {\n//         await updateCV(id, newCv); // Bruk ID for å oppdatere\n//         alert(\"CV oppdatert!\");\n//       } else {\n//         await createCV(newCv); // Opprett ny CV\n//         alert(\"CV opprettet!\");\n//         setCvList([...cvList, newCv]); // Legg til det nye CV-et i listen\n//       }\n\n//       setCv({\n//         personalInfo: { name: \"\", email: \"\", phone: \"\" },\n//         skills: \"\",\n//         education: \"\",\n//         experience: \"\",\n//         references: \"\",\n//       });\n//       setIsEditing(false);\n//     } catch (error) {\n//       console.error(\"Feil ved oppretting eller oppdatering av CV:\", error);\n//       alert(\"Feil ved oppretting eller oppdatering av CV.\");\n//     }\n//   };\n\n//   const handleDelete = async (cvId) => {\n//     try {\n//       await deleteCV(cvId); // Slett CV basert på ID\n//       alert(\"CV slettet!\");\n//       setCvList(cvList.filter((item) => item._id !== cvId)); // Fjern CV fra listen etter sletting\n//       navigate(\"/cvs\"); // Naviger til listen av CV-er\n//     } catch (error) {\n//       alert(\"Feil ved sletting av CV.\");\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setCv({ ...cv, personalInfo: { ...cv.personalInfo, [name]: value } });\n//   };\n\n//   const handleEdit = (cvItem) => {\n//     setCv({\n//       personalInfo: {\n//         name: cvItem.personalInfo.name,\n//         email: cvItem.personalInfo.email,\n//         phone: cvItem.personalInfo.phone,\n//       },\n//       skills: cvItem.skills,\n//       education: cvItem.education,\n//       experience: cvItem.experience,\n//       references: cvItem.references,\n//     });\n//     setIsEditing(true);\n//     setId(cvItem._id); // Sett ID for redigering\n//   };\n\n//   return (\n//     <div className=\"p-8 bg-gradient-to-r from-[#90E0EF] to-[#CAF0F8] min-h-screen\">\n//       <h1 className=\"mb-20 text-3xl font-bold text-[#023E8A] text-center\">\n//         {isEditing ? \"Rediger CV\" : \"Opprett CV\"}\n//       </h1>\n\n//       <form\n//         onSubmit={handleSubmit}\n//         className=\"max-w-md p-10 mx-auto bg-white rounded-lg shadow-lg\"\n//       >\n//         <h2 className=\"mb-4 text-xl text-[#023E8A] text-center\">\n//           {isEditing ? \"Oppdater CV\" : \"Opprett ny CV\"}\n//         </h2>\n\n//         <label className=\"block mb-2\">Navn:</label>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           value={cv.personalInfo.name}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <label className=\"block mb-2\">E-post:</label>\n//         <input\n//           type=\"email\"\n//           name=\"email\"\n//           value={cv.personalInfo.email}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <label className=\"block mb-2\">Telefonnummer:</label>\n//         <input\n//           type=\"tel\"\n//           name=\"phone\"\n//           value={cv.personalInfo.phone}\n//           onChange={handleChange}\n//           required\n//           className=\"w-full p-3 mb-4 border-2 border-[#023E8A] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#0077B6]\"\n//         />\n\n//         <button\n//           type=\"submit\"\n//           className=\"mt-8 w-full p-3 text-white bg-[#0077B6] rounded-lg hover:bg-[#023E8A] focus:ring-4 focus:ring-[#90E0EF]\"\n//         >\n//           {isEditing ? \"Oppdater CV\" : \"Opprett CV\"}\n//         </button>\n\n//         {isEditing && (\n//           <button\n//             type=\"button\"\n//             onClick={() => handleDelete(id)}\n//             className=\"mt-4 w-full p-3 text-white bg-red-500 rounded-lg hover:bg-red-600 focus:ring-4 focus:ring-[#90E0EF]\"\n//           >\n//             Slett CV\n//           </button>\n//         )}\n//       </form>\n\n//       <h2 className=\"mt-16 mb-4 text-xl text-[#023E8A]\">Din CV:</h2>\n//       <ul className=\"space-y-4\">\n//         {cvList.map((cvItem, index) => (\n//           <li\n//             key={cvItem._id || index} // Bruk ID for hver CV\n//             className=\"p-4 bg-white border rounded-lg shadow-lg\"\n//           >\n//             <p>\n//               <strong>Navn:</strong> {cvItem.personalInfo.name}\n//             </p>\n//             <p>\n//               <strong>E-post:</strong> {cvItem.personalInfo.email}\n//             </p>\n//             <p>\n//               <strong>Telefonnummer:</strong> {cvItem.personalInfo.phone}\n//             </p>\n//             <button\n//               onClick={() => handleEdit(cvItem)}\n//               className=\"mt-2 w-full p-2 text-white bg-[#023E8A] rounded-lg hover:bg-[#0077B6]\"\n//             >\n//               Rediger\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default CVForm;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}