{"ast":null,"code":"const API_BASE = process.env.REACT_APP_API_BASE;\n\n//Hent alle brukere\nexport const fetchUsers = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/users`);\n    if (!response.ok) {\n      throw new Error(\"Feil ved henting av brukere\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n//Registrer ny bruker\nexport const createUser = async newUser => {\n  try {\n    const response = await fetch(`${API_BASE}/users`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newUser)\n    });\n    if (!response.ok) {\n      throw new Error(\"Feil ved oppretting av bruker\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const updateUser = async (id, updatedUser) => {\n  try {\n    const response = await fetch(`${API_BASE}/users/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedUser)\n    });\n    console.log(\"Responsstatus:\", response.status);\n\n    // Håndter respons uten innhold\n    if (response.status === 200 || response.status === 204) {\n      const contentLength = response.headers.get(\"Content-Length\");\n      if (!contentLength || contentLength === \"0\") {\n        console.log(\"Oppdatering vellykket, men ingen data returnert.\");\n        return updatedUser; // Returner brukeren direkte\n      }\n      const data = await response.json(); // Hvis innhold finnes\n      return data;\n    } else {\n      throw new Error(\"Feil statuskode ved oppdatering\");\n    }\n  } catch (error) {\n    console.error(\"Feil ved oppdatering av bruker:\", error);\n    throw error;\n  }\n};\n\n//Slett bruker\nexport const deleteUser = async id => {\n  try {\n    const response = await fetch(`${API_BASE}/users/${id}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) {\n      throw new Error(\"Feil ved sletting av bruker\");\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Hent alle CV-er\nexport const fetchAllCVs = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/cvs`);\n    if (!response.ok) {\n      throw new Error(\"Feil ved henting av CV-er\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Hent alle CV-er basert på userId\nexport const fetchCVsByUserId = async userId => {\n  try {\n    const response = await fetch(`${API_BASE}/cvs=${userId}`);\n    if (!response.ok) {\n      throw new Error(\"Feil ved henting av CV-er\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Eksempel på å opprette, oppdatere, og slette CV-er (resten av funksjonene skal være uendret)\nexport const createCV = async newCV => {\n  try {\n    const response = await fetch(`${API_BASE}/cvs`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newCV)\n    });\n    if (!response.ok) {\n      throw new Error(\"Feil ved oppretting av CV\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const updateCV = async (id, updatedCV) => {\n  try {\n    const response = await fetch(`${API_BASE}/cvs/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedCV)\n    });\n    if (response.status === 200 || response.status === 204) {\n      const contentLength = response.headers.get(\"Content-Length\");\n      if (!contentLength || contentLength === \"0\") {\n        console.log(\"Oppdatering vellykket, men ingen data returnert.\");\n        return updatedCV;\n      }\n      const data = await response.json();\n      return data;\n    } else {\n      throw new Error(\"Feil statuskode ved oppdatering\");\n    }\n  } catch (error) {\n    console.error(\"Feil ved oppdatering av CV:\", error);\n    throw error;\n  }\n};\nexport const deleteCV = async id => {\n  try {\n    const response = await fetch(`${API_BASE}/cvs/${id}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) {\n      throw new Error(\"Feil ved sletting av CV\");\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_BASE","fetchUsers","response","fetch","ok","Error","data","json","error","console","createUser","newUser","method","headers","body","JSON","stringify","updateUser","id","updatedUser","log","status","contentLength","get","deleteUser","fetchAllCVs","fetchCVsByUserId","userId","createCV","newCV","updateCV","updatedCV","deleteCV"],"sources":["/Users/rubengrytten/Desktop/cv_app/src/services/api.js"],"sourcesContent":["const API_BASE = process.env.REACT_APP_API_BASE;\n\n//Hent alle brukere\nexport const fetchUsers = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/users`);\n    if (!response.ok) {\n      throw new Error(\"Feil ved henting av brukere\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n//Registrer ny bruker\nexport const createUser = async (newUser) => {\n  try {\n    const response = await fetch(`${API_BASE}/users`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newUser),\n    });\n    if (!response.ok) {\n      throw new Error(\"Feil ved oppretting av bruker\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const updateUser = async (id, updatedUser) => {\n  try {\n    const response = await fetch(`${API_BASE}/users/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(updatedUser),\n    });\n\n    console.log(\"Responsstatus:\", response.status);\n\n    // Håndter respons uten innhold\n    if (response.status === 200 || response.status === 204) {\n      const contentLength = response.headers.get(\"Content-Length\");\n\n      if (!contentLength || contentLength === \"0\") {\n        console.log(\"Oppdatering vellykket, men ingen data returnert.\");\n        return updatedUser; // Returner brukeren direkte\n      }\n\n      const data = await response.json(); // Hvis innhold finnes\n      return data;\n    } else {\n      throw new Error(\"Feil statuskode ved oppdatering\");\n    }\n  } catch (error) {\n    console.error(\"Feil ved oppdatering av bruker:\", error);\n    throw error;\n  }\n};\n\n//Slett bruker\nexport const deleteUser = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE}/users/${id}`, {\n      method: \"DELETE\",\n    });\n    if (!response.ok) {\n      throw new Error(\"Feil ved sletting av bruker\");\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Hent alle CV-er\nexport const fetchAllCVs = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/cvs`);\n    if (!response.ok) {\n      throw new Error(\"Feil ved henting av CV-er\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Hent alle CV-er basert på userId\nexport const fetchCVsByUserId = async (userId) => {\n  try {\n    const response = await fetch(`${API_BASE}/cvs=${userId}`);\n    if (!response.ok) {\n      throw new Error(\"Feil ved henting av CV-er\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Eksempel på å opprette, oppdatere, og slette CV-er (resten av funksjonene skal være uendret)\nexport const createCV = async (newCV) => {\n  try {\n    const response = await fetch(`${API_BASE}/cvs`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newCV),\n    });\n    if (!response.ok) {\n      throw new Error(\"Feil ved oppretting av CV\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const updateCV = async (id, updatedCV) => {\n  try {\n    const response = await fetch(`${API_BASE}/cvs/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(updatedCV),\n    });\n\n    if (response.status === 200 || response.status === 204) {\n      const contentLength = response.headers.get(\"Content-Length\");\n\n      if (!contentLength || contentLength === \"0\") {\n        console.log(\"Oppdatering vellykket, men ingen data returnert.\");\n        return updatedCV;\n      }\n\n      const data = await response.json();\n      return data;\n    } else {\n      throw new Error(\"Feil statuskode ved oppdatering\");\n    }\n  } catch (error) {\n    console.error(\"Feil ved oppdatering av CV:\", error);\n    throw error;\n  }\n};\n\nexport const deleteCV = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE}/cvs/${id}`, {\n      method: \"DELETE\",\n    });\n    if (!response.ok) {\n      throw new Error(\"Feil ved sletting av CV\");\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}